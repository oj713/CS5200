install.packages("RSQLite")
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
dbcon <- dbConnect(RSQLite::SQLite(), "myDB.db")
file.remove("committeeDB.sqlite")
knitr::opts_chunk$set(echo = TRUE)
file.remove("committeeDB.sqlite")
file.remove("committeeDB.sqlite")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
file.remove("myDB.db")
file.remove("committeeDB.sqlite")
rmarkdown::render_site()
getwd()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
getwd()
rmarkdown::render_site()
getwd()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
dbDisconnect(dbcon)
file.remove("committeeDB.sqlite")
file.remove("committeeDB.sqlite")
file.remove("committeeDB.sqlite")
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
fpath = ""
dbfile = "committeeDB.sqlite"
dbcon <- dbConnect(SQLite(), paste0(fpath, dbfile))
file.remove("committeeDB.sqlite")
file.remove("committeeDB.sqlite")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
dbcon <- dbConnect(RSQLite::SQLite(), "myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
dbcon <- dbConnect(RSQLite::SQLite(), "myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
dbcon <- dbConnect(RSQLite::SQLite(), "myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
file.remove("myDB.db")
knitr::opts_chunk$set(echo = TRUE)
file.remove("committeeDB.sqlite")
file.remove("committeeDB.sqlite")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(xml)
install.packages("xml")
install.packages("XML")
rmarkdown::render_site()
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("files/purchase_order_erd.png")
knitr::include_graphics("files/purchase_order_erd.png")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("files/purchase_order_erd.png")
library(XML)
library(RSQLite)
library(DBI)
library(knitr)
xml_file <- "files/purchaseorders.xml"
db_file <- "files/podb.db"
# no validation
xmlDOM <- xmlParse(file = xml_file)
# get number of children of root (number of purchase orders)
numPO <- xmlSize(r)
# no validation
xmlDOM <- xmlParse(file = xml_file)
r <- xmlRoot(xmlDOM)
# get number of children of root (number of purchase orders)
numPO <- xmlSize(r)
get_v(mode) <- function(mode) {
vector(mode = mode, length = numPO)
}
# get number of children of root (number of purchase orders)
numPO <- xmlSize(r)
get_v <- function(mode) {
vector(mode = mode, length = numPO)
}
# create various data frames to hold data; initial values are just
# to define data type and length and will be replaced; pre-allocation
# is better for performance than dynamic allocation of memory
PO.df <- data.frame (POnum = get_v("integer"),
orderDate = get_v("integer"),
billing = get_v("integer"),
shipping = get_v("integer"),
delNotes = get_v("character"),
stringsAsFactors = F)
# we actually do not know the number of addresses so we cannot
# pre-allocate the memory
Address.df <- data.frame (aID = integer(),
name = character(),
street = character(),
city = character(),
state = character(),
zip = character(),
country = character(),
stringsAsFactors = F)
Item.df <- data.frame (PartNumber = character(),
ProductName = character(),
Quantity = integer(),
USPrice = numeric(),
Comment = character(),
ShipDate = character(),
POnum = integer(),
stringsAsFactors = F)
xpathSApply("//PurchaseOrder")
xpathSApply(xmlDOM, "//PurchaseOrder")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(stringr)
plants <- xmlParse("plants.xml")
library(XML)
library(stringr)
plants <- xmlParse("files/plants.xml")
xpathSApply(plants, "//PLANT[light='Mostly Shady']/BOTANICAL")
xpathSApply(plants, "//PLANT[LIGHT='Mostly Shady']/BOTANICAL")
library(XML)
library(stringr)
plants <- xmlParse("files/plants.xml")
plants[[1]][[1]]
xpathSApply(plants, "//PLANT[LIGHT='Mostly Shady']/BOTANICAL")[[1:3]]
xpathSApply(plants, "//PLANT[LIGHT='Mostly Shady']/BOTANICAL")[1:3]
findp("//PLANT[LIGHT='Mostly Shady']/BOTANICAL")
library(XML)
library(stringr)
plants <- xmlParse("files/plants.xml")
findp <- function(xpath_expr) {
xpathSApply(plants, xpath_expr)[1:3]
}
findp("//PLANT[LIGHT='Mostly Shady']/BOTANICAL")
findp("//PLANT/PRICE/text()")
library(XML)
library(stringr)
plants <- xmlParse("files/plants.xml")
findp <- function(xpath_expr) {
xpathSApply(plants, xpath_expr) |> head(3)
}
findp("//PLANT[LIGHT='Mostly Shady']/BOTANICAL")
findp("//PLANT[-2]/COMMON")
findp("//PLANT[1]/COMMON")
findp("//PLANT[position() = last() - 1]/COMMON")
findp("//PLANT/count()")
findp("count(//PLANT)")
findp("//PLANT[contains(BOTANICAL, 'Polemonium'")
findp("//PLANT[contains(BOTANICAL, 'Polemonium')]")
findp("//PLANT[contains(BOTANICAL, 'Polemonium')]/COMMON")
findp("//PLANT[starts-with(BOTANICAL, 'Polemonium')]/COMMON")
findp("//PLANT[substring(AVAILABILITY, 3, 4) = '06']")
findp("//PLANT[substring(AVAILABILITY, 3, 5) = '06']")
findp("//PLANT/substring(AVAILABILITY, 3, 5)")
findp("//PLANT[substring(AVAILABILITY, 3, 2) = '06']")
findp("//PLANT[starts-with(AVAILABILITY, '07')]/COMMON")
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet'")
med <- xmlParse("files/pubmed_sample.xml")
findm <- function(xpath_expr) {
xpathSApply(med, xpath_expr) |> head(3)
}
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet'")
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet'/Title")
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet']/Title")
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet']")
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet']/Article/Title")
findm("//PubmedArticle//Article//JournalIssue[@CitedMedium = 'Internet']/Article")
findm("//PubmedArticle/Article/JournalIssue")
findm("//PubmedArticle/Article")
findm("//PubmedArticle/MedlineCitation/Article")
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']")
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']"))
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']/Article"))
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']/MedlineCitation"))
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']"))
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']//..//Title"))
findm(paste0("//PubmedArticle//MedlineCitation//Article//",
"JournalIssue[@CitedMedium = 'Internet']/../Title"))
findm(paste0("//PubmedArticle//MedlineCitation//Article",
"//JournalIssue[PubMedPubDate/@PubStatus = 'accepted'"))
findm(paste0("//PubmedArticle//MedlineCitation//Article",
"//JournalIssue[PubMedPubDate/@PubStatus = 'accepted']"))
findm(paste0("//PubmedArticle//Article//",
"JournalIssue[@CitedMedium = 'Internet']/../Title"))
findm(paste0("//PubmedArticle//Article//JournalIssue",
"[PubDate/Year = '2012']"))
findm(paste0("count(//PubmedArticle//Article//JournalIssue",
"[PubDate/Year = '2012'])"))
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10)]",
"/../ArticleTitle")
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10)]")
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count() > 10)]")
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10)]")
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10]")
findm(paste0("//PubmedArticle//Article/AuthorList[count(Author) > 10]")
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10]"))
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10]/count(Author)"))
findm(paste0("//PubmedArticle//Article/",
"AuthorList[count(Author) > 10]/../ArticleTitle"))
po <- xmlParse("files/po.xml")
findpo <- function(xpath_expr) {
xpathSApply(po, xpath_expr) |> head(3)
}
findpo("sum(//Items/Item/Quantity")
po <- xmlParse("files/po.xml")
findpo <- function(xpath_expr) {
xpathSApply(po, xpath_expr) |> head(3)
}
findpo("sum(//Items/Item/Quantity")
findpo("sum(//Items/Item/Quantity)")
findpo("sum(//PurchaseOrder/Items/Item/Quantity)")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("files/datawarehousearchitecture.png")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('files/starschema.png')
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
