by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
knitr::opts_chunk$set(echo = TRUE)
# 1. Library
library(RMySQL)
# 2. Settings
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
birdstrikes <- readr::read_csv("BirdStrikesData-V2.csv",
col_types = readr::cols())
relevant_columns <- c("rid", "flight_date", "airline", "aircraft",
"flight_phase", "altitude_ft", "pilot_warned_flag",
"airport", "origin", # for airports
"sky_conditions") # for conditions
birdstrikes <- birdstrikes[,relevant_columns] |>
na.omit()
colnames(birdstrikes) <- c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning", # incidents
"airportName", "state", # airport
"ccondition") # conditions
# Converting date
birdstrikes$idate <- as.Date(birdstrikes$idate, "%m/%d/%Y")
# Making warning true or false
birdstrikes$warning <- birdstrikes$warning == "Y"
# Remove military flights
birdstrikes <- birdstrikes[birdstrikes$airline != "MILITARY",]
# Harmonize flight phases
birdstrikes$flightPhase <- birdstrikes$flightPhase |>
sapply(function(phase) switch(phase,
"Take-off run" = "takeoff",
"Climb" = "inflight",
"Descent" = "inflight",
"Landing Roll" = "landing",
"Approach" = "landing",
"Taxi" = "unknown",
"Parked" = "unknown"))
library(dplyr)
airports_df <- birdstrikes[,c("airportName", "state")] |>
dplyr::group_by(airportName, state) |>
dplyr::summarize(.groups = "keep") |>
dplyr::ungroup()
airports_df$aid <- 1:nrow(airports_df)
airports_df$airportCode <- NA
birdstrikes <- merge(birdstrikes, airports_df,
by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
duplicated(airports_df$airportname)
duplicated(airports_df$airportName)
duplicated(airports_df$airportName) |> any()
knitr::opts_chunk$set(echo = TRUE)
# 1. Library
library(RMySQL)
# 2. Settings
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
birdstrikes <- readr::read_csv("BirdStrikesData-V2.csv",
col_types = readr::cols())
relevant_columns <- c("rid", "flight_date", "airline", "aircraft",
"flight_phase", "altitude_ft", "pilot_warned_flag",
"airport", "origin", # for airports
"sky_conditions") # for conditions
birdstrikes <- birdstrikes[,relevant_columns] |>
na.omit()
colnames(birdstrikes) <- c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning", # incidents
"airportName", "state", # airport
"ccondition") # conditions
# Converting date
birdstrikes$idate <- as.Date(birdstrikes$idate, "%m/%d/%Y")
# Making warning true or false
birdstrikes$warning <- birdstrikes$warning == "Y"
# Remove military flights
birdstrikes <- birdstrikes[birdstrikes$airline != "MILITARY",]
# Harmonize flight phases
birdstrikes$flightPhase <- birdstrikes$flightPhase |>
sapply(function(phase) switch(phase,
"Take-off run" = "takeoff",
"Climb" = "inflight",
"Descent" = "inflight",
"Landing Roll" = "landing",
"Approach" = "landing",
"Taxi" = "unknown",
"Parked" = "unknown"))
library(dplyr)
airports_df <- birdstrikes[,c("airportName", "state")] |>
dplyr::group_by(airportName, state) |>
dplyr::summarize(.groups = "keep") |>
dplyr::ungroup()
airports_df$aid <- 1:nrow(airports_df)
airports_df$airportCode <- NA
birdstrikes <- merge(birdstrikes, airports_df,
by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
knitr::opts_chunk$set(echo = TRUE)
# 1. Library
library(RMySQL)
# 2. Settings
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
birdstrikes <- readr::read_csv("BirdStrikesData-V2.csv",
col_types = readr::cols())
relevant_columns <- c("rid", "flight_date", "airline", "aircraft",
"flight_phase", "altitude_ft", "pilot_warned_flag",
"airport", "origin", # for airports
"sky_conditions") # for conditions
birdstrikes <- birdstrikes[,relevant_columns] |>
na.omit()
colnames(birdstrikes) <- c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning", # incidents
"airportName", "state", # airport
"ccondition") # conditions
# Converting date
birdstrikes$idate <- as.Date(birdstrikes$idate, "%m/%d/%Y")
# Making warning true or false
birdstrikes$warning <- birdstrikes$warning == "Y"
# Remove military flights
birdstrikes <- birdstrikes[birdstrikes$airline != "MILITARY",]
# Harmonize flight phases
birdstrikes$flightPhase <- birdstrikes$flightPhase |>
sapply(function(phase) switch(phase,
"Take-off run" = "takeoff",
"Climb" = "inflight",
"Descent" = "inflight",
"Landing Roll" = "landing",
"Approach" = "landing",
"Taxi" = "unknown",
"Parked" = "unknown"))
library(dplyr)
airports_df <- birdstrikes[,c("airportName", "state")] |>
dplyr::group_by(airportName, state) |>
dplyr::summarize(.groups = "keep") |>
dplyr::ungroup()
airports_df$aid <- 1:nrow(airports_df)
airports_df$airportCode <- NA
birdstrikes <- merge(birdstrikes, airports_df,
by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
View(birdstrikes)
knitr::opts_chunk$set(echo = TRUE)
# 1. Library
library(RMySQL)
# 2. Settings
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
birdstrikes <- readr::read_csv("BirdStrikesData-V2.csv",
col_types = readr::cols())
relevant_columns <- c("rid", "flight_date", "airline", "aircraft",
"flight_phase", "altitude_ft", "pilot_warned_flag",
"airport", "origin", # for airports
"sky_conditions") # for conditions
birdstrikes <- birdstrikes[,relevant_columns] |>
na.omit()
colnames(birdstrikes) <- c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning", # incidents
"airportName", "state", # airport
"ccondition") # conditions
# Converting date
birdstrikes$idate <- as.Date(birdstrikes$idate, "%m/%d/%Y")
# Making warning true or false
birdstrikes$warning <- birdstrikes$warning == "Y"
# Remove military flights
birdstrikes <- birdstrikes[birdstrikes$airline != "MILITARY",]
# Harmonize flight phases
birdstrikes$flightPhase <- birdstrikes$flightPhase |>
sapply(function(phase) switch(phase,
"Take-off run" = "takeoff",
"Climb" = "inflight",
"Descent" = "inflight",
"Landing Roll" = "landing",
"Approach" = "landing",
"Taxi" = "unknown",
"Parked" = "unknown"))
library(dplyr)
airports_df <- birdstrikes[,c("airportName", "state")] |>
dplyr::group_by(airportName, state) |>
dplyr::summarize(.groups = "keep") |>
dplyr::ungroup()
airports_df$aid <- 1:nrow(airports_df)
airports_df$airportCode <- NA
birdstrikes <- merge(birdstrikes, airports_df,
by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
knitr::opts_chunk$set(echo = TRUE)
# 1. Library
library(RMySQL)
# 2. Settings
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
birdstrikes <- readr::read_csv("BirdStrikesData-V2.csv",
col_types = readr::cols())
relevant_columns <- c("rid", "flight_date", "airline", "aircraft",
"flight_phase", "altitude_ft", "pilot_warned_flag",
"airport", "origin", # for airports
"sky_conditions") # for conditions
birdstrikes <- birdstrikes[,relevant_columns] |>
na.omit()
colnames(birdstrikes) <- c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning", # incidents
"airportName", "state", # airport
"ccondition") # conditions
# Converting date
birdstrikes$idate <- as.Date(birdstrikes$idate, "%m/%d/%Y")
# Making warning true or false
birdstrikes$warning <- birdstrikes$warning == "Y"
# Remove military flights
birdstrikes <- birdstrikes[birdstrikes$airline != "MILITARY",]
# Harmonize flight phases
birdstrikes$flightPhase <- birdstrikes$flightPhase |>
sapply(function(phase) switch(phase,
"Take-off run" = "takeoff",
"Climb" = "inflight",
"Descent" = "inflight",
"Landing Roll" = "landing",
"Approach" = "landing",
"Taxi" = "unknown",
"Parked" = "unknown"))
library(dplyr)
airports_df <- birdstrikes[,c("airportName", "state")] |>
dplyr::group_by(airportName, state) |>
dplyr::summarize(.groups = "keep") |>
dplyr::ungroup()
airports_df$aid <- 1:nrow(airports_df)
airports_df$airportCode <- NA
birdstrikes <- merge(birdstrikes, airports_df,
by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
knitr::opts_chunk$set(echo = TRUE)
# 1. Library
library(RMySQL)
# 2. Settings
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
birdstrikes <- readr::read_csv("BirdStrikesData-V2.csv",
col_types = readr::cols())
relevant_columns <- c("rid", "flight_date", "airline", "aircraft",
"flight_phase", "altitude_ft", "pilot_warned_flag",
"airport", "origin", # for airports
"sky_conditions") # for conditions
birdstrikes <- birdstrikes[,relevant_columns] |>
na.omit()
colnames(birdstrikes) <- c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning", # incidents
"airportName", "state", # airport
"ccondition") # conditions
# Converting date
birdstrikes$idate <- as.Date(birdstrikes$idate, "%m/%d/%Y")
# Making warning true or false
birdstrikes$warning <- birdstrikes$warning == "Y"
# Remove military flights
birdstrikes <- birdstrikes[birdstrikes$airline != "MILITARY",]
# Harmonize flight phases
birdstrikes$flightPhase <- birdstrikes$flightPhase |>
sapply(function(phase) switch(phase,
"Take-off run" = "takeoff",
"Climb" = "inflight",
"Descent" = "inflight",
"Landing Roll" = "landing",
"Approach" = "landing",
"Taxi" = "unknown",
"Parked" = "unknown"))
library(dplyr)
airports_df <- birdstrikes[,c("airportName", "state")] |>
dplyr::group_by(airportName, state) |>
dplyr::summarize(.groups = "keep") |>
dplyr::ungroup()
airports_df$aid <- 1:nrow(airports_df)
airports_df$airportCode <- NA
birdstrikes <- merge(birdstrikes, airports_df,
by = c("airportName", "state"),
all = TRUE)
conditions_df <- data.frame(ccondition = unique(birdstrikes$ccondition),
explanation = NA)
conditions_df$cid <- 1:nrow(conditions_df)
birdstrikes <- merge(birdstrikes, conditions_df,
by = c("ccondition"),
all = TRUE)
incidents_df <- birdstrikes[,c("rid", "idate", "airline", "aircraft",
"flightPhase", "altitude", "warning",
"aid", "cid")] |>
dplyr::rename(origin = aid,
conditions = cid)
dbWriteTable(mydb, "conditions", conditions_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "airports", airports_df,
append = TRUE, row.names = FALSE)
dbWriteTable(mydb, "incidents", incidents_df,
append = TRUE, row.names = FALSE)
yearly_strikes <-
dbGetQuery(mydb, "SELECT YEAR(idate) AS year, COUNT(*) AS num_incidents
FROM incidents
GROUP BY year
HAVING year >= 2005 AND year <= 2011
ORDER BY year")
plot(x = yearly_strikes$year,
y = yearly_strikes$num_incidents,
type = "o",
xlab = "Year",
ylab = "Number of Bird Strikes",
main = "Yearly Bird Strike Incidents")
query <- "SELECT * FROM airports
WHERE aid IN (SELECT origin FROM incidents WHERE rid IN (1, 2, 3));"
dbGetQuery(mydb, query)
