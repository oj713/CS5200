doSQL <- function(...) {
dbExecute(dw, paste(...))
}
doSQL("DROP TABLE IF EXISTS starschema.PublicationDimension;")
doSQL("DROP TABLE IF EXISTS starschema.JournalFact;")
doSQL("CREATE TABLE starschema.JournalFact (",
"jid INTEGER NOT NULL PRIMARY KEY,",
"ISSN TEXT,",
"ISSNType TEXT,",
"Title TEXT,",
"ISOAbbreviation TEXT,",
"numIssues INTEGER,",
"numVolumes INTEGER, ",
"numArticles INTEGER,",
"numAuthors INTEGER",
");")
doSQL("CREATE TABLE starschema.PublicationDimension (",
"jid INTEGER NOT NULL,",
"PMID INTEGER NOT NULL,",
"Language TEXT NOT NULL,",
"ArticleTitle TEXT NOT NULL,",
"aid INTEGER NOT NULL,",
"aLastName TEXT,",
"aForeName TEXT,",
"aaffiliation TEXT,",
"Volume INTEGER,",
"Issue INTEGER,",
"PubYear INTEGER NOT NULL,",
"PubMonth INTEGER NOT NULL,",
"PubDay INTEGER,",
"PubQuarter INTEGER,",
"FOREIGN KEY (jid) REFERENCES JournalFact(jid)",
");")
journalFactDF <-
getQuery("SELECT j.*, d.numIssues, d.numVolumes, d.numArticles, d.numAuthors",
"FROM Journal j",
"INNER JOIN (SELECT ji.JournalID AS jid,",
"COUNT(DISTINCT ji.Issue) AS numIssues,",
"COUNT(DISTINCT ji.Volume) AS numVolumes,",
"COUNT(DISTINCT ar.PMID) AS numArticles,",
"COUNT(DISTINCT au.aid) AS numAuthors",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)",
"GROUP BY ji.JournalID) AS d",
"ON (j.jid = d.jid)")
db <- dbConnect(SQLite(), "pubmedArticleSet.db")
getQuery <- function(...) {
dbGetQuery(db, paste(...)) |> as_tibble()
}
journalFactDF <-
getQuery("SELECT j.*, d.numIssues, d.numVolumes, d.numArticles, d.numAuthors",
"FROM Journal j",
"INNER JOIN (SELECT ji.JournalID AS jid,",
"COUNT(DISTINCT ji.Issue) AS numIssues,",
"COUNT(DISTINCT ji.Volume) AS numVolumes,",
"COUNT(DISTINCT ar.PMID) AS numArticles,",
"COUNT(DISTINCT au.aid) AS numAuthors",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)",
"GROUP BY ji.JournalID) AS d",
"ON (j.jid = d.jid)")
dbWriteTable(dw, "JournalFact", journalFactDF, append = TRUE,
row.names = FALSE)
doSQL("SET GLOBAL local_infile = 1;")
dbWriteTable(dw, "JournalFact", journalFactDF, append = TRUE,
row.names = FALSE)
doSQL("UPDATE JournalFact SET numAuthors = 0 WHERE numAuthors IS NULL")
dbGetQuery(dw, "SELECT * FROM journalFactDF LIMIT 10")
dbGetQuery(dw, "SELECT * FROM JournalFact LIMIT 10")
dbGetQuery(dw, "SELECT * FROM JournalFact WHERE numAuthors = 0")
publicationDimensionDF <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"auth.aid, auth.ForeName AS aForeName, auth.LastName AS aLastName,",
"auth.affiliation AS aaffiliation, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
publicationDimensionDF <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"au.aid, au.ForeName AS aForeName, au.LastName AS aLastName,",
"au.affiliation AS aaffiliation, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
publicationDimensionDF <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"aus.aid, au.ForeName AS aForeName, au.LastName AS aLastName,",
"au.affiliation AS aaffiliation, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship aus ON (aus.PMID = ar.PMID)",
"INNER JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
publicationDimensionDF
publicationDimensionDF |> filter(is.na(aid))
noAuthorsPublications <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"auth.aid, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
noAuthorsPublications <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"au.aid, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
noAuthorsPublications
noAuthorsPublications |> filter(is.na(aid))
publicationDimensionDF <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"aus.aid, au.ForeName AS aForeName, au.LastName AS aLastName,",
"au.affiliation AS aaffiliation, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship aus ON (aus.PMID = ar.PMID)",
"LEFT JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
publicationDimensionDF <-
getQuery("SELECT *",
"FROM Article ar",
"LEFT JOIN Authorship aus ON (aus.PMID = ar.PMID)",
"LEFT JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
publicationDimensionDF <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"aus.aid, au.ForeName AS aForeName, au.LastName AS aLastName,",
"au.affiliation AS aaffiliation, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship aus ON (aus.PMID = ar.PMID)",
"LEFT JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
publicationDimensionDF
publicationDimensionDF |> filter(is.na(aid))
dbWriteTable(dw, "PublicationDimension", publicationDimensionDF,
append = TRUE, row.names = FALSE)
dbGetQuery(dw, "SELECT * FROM PublicationDimension LIMIT 20")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid, COUNT(DISTINCT r.PMID) AS numArticles,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)",
"INNER JOIN Article r ON (a.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY a.aid")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)",
"INNER JOIN Article r ON (a.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY a.aid")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)",
"INNER JOIN Article r ON (a.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY a.aid")
getQuery("select * from authorship where aid = 2")
getQuery("select * from authorship where pmid = 2")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)",
"INNER JOIN Article r ON (a.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY a.aid")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid,", #COUNT(DISTINCT r.PMID) AS numArticles,",
"ca.numCoAuthors",#COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid,", #COUNT(DISTINCT r.PMID) AS numArticles,",
"ca.numCoAuthors",#COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)") |> filter(aid == 2)
numCoAuthors <- getQuery("SELECT a1.aid, COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid")
numCoAuthors
dbDisconnect(db)
library(dplyr)
library(RMySQL)
library(RSQLite)
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
db <- dbConnect(SQLite(), "pubmedArticleSet.db")
# helper functions to simplify executing and retrieving
doSQL <- function(...) {
dbExecute(dw, paste(...))
}
getQuery <- function(...) {
dbGetQuery(db, paste(...)) |> as_tibble()
}
doSQL("SET GLOBAL local_infile = 1;")
doSQL("DROP TABLE IF EXISTS starschema.AuthorshipDimension;")
doSQL("DROP TABLE IF EXISTS starschema.AuthorFact;")
# CREATING SQL TABLES
doSQL(
"CREATE TABLE starschema.AuthorFact (",
"aid INT NOT NULL PRIMARY KEY,",
"ValidYN BOOLEAN NOT NULL,",
"CollectiveName TEXT,",
"LastName TEXT,",
"ForeName TEXT,",
"Initials TEXT,",
"Suffix TEXT,",
"Affiliation TEXT,",
"numArticles INT,",
"numCoAuthors INT,",
"numJournals INT",
");"
)
doSQL(
"CREATE TABLE starschema.AuthorshipDimension (",
"aid INT NOT NULL PRIMARY KEY,",
"ArticleTitle TEXT NOT NULL,",
"ArticleLanguage TEXT,",
"PubYear INT,",
"PubMonth INT,",
"PubDay INT,",
"JournalISSN TEXT,",
"JournalISSNType TEXT,",
"JournalISO TEXT,",
"Volume INT,",
"Issue INT",
")"
)
numCoAuthors <- getQuery("SELECT a1.aid, COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid")
numCoAuthors
getQuery("select * from authorship where aid = 2")
getQuery("select * from authorship where aid = 1")
getQuery("select * from authorship where pmid = 22306")
getQuery("select count(distinct aid) - 1 from authorship where pmid = 22306")
numCoAuthors <- getQuery("SELECT a1.aid, COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid")
numCoAuthors
getQuery("select * from authorship where aid = 2")
getQuery("select * from authorship where pmid = 13696")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT a.aid, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship a",
"INNER JOIN coAuthors ca ON (ca.aid = a.aid)",
"INNER JOIN Article r ON (a.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY a.aid")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT au.*, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship aus",
"INNER JOIN Author au ON (au.aid = aus.aid)",
"INNER JOIN coAuthors ca ON (ca.aid = aus.aid)",
"INNER JOIN Article r ON (aus.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY au.*")
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT au.*, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship aus",
"INNER JOIN Author au ON (au.aid = aus.aid)",
"INNER JOIN coAuthors ca ON (ca.aid = aus.aid)",
"INNER JOIN Article r ON (aus.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY au.aid")
authorDF <-
getQuery("WITH coAuthors AS (SELECT a1.aid,",
"COUNT(DISTINCT a2.aid) - 1 AS numCoAuthors",
"FROM Authorship a1",
"INNER JOIN Authorship a2 ON (a1.PMID = a2.PMID)",
"GROUP BY a1.aid)",
"SELECT au.*, COUNT(DISTINCT r.PMID) AS numArticles, ca.numCoAuthors,",
"COUNT(DISTINCT ji.JournalID) AS numJournals",
"FROM Authorship aus",
"INNER JOIN Author au ON (au.aid = aus.aid)",
"INNER JOIN coAuthors ca ON (ca.aid = aus.aid)",
"INNER JOIN Article r ON (aus.PMID = r.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = r.JournalIssueID)",
"GROUP BY au.aid")
dbWriteTable(dw, "AuthorFact", authorDF,
append = TRUE, row.names = FALSE)
authorshipDimensionDF <-
getQuery("SELECT a.aid, r.ArticleTitle, r.Language AS ArticleLanguage,",
"i.PubYear, i.PubMonth, i.PubDay, j.ISSN AS JournalISSN,",
"j.ISSNType AS JournalISSNType, j.ISOAbbreviation AS JournalISO,",
"i.Volume, i.Issue",
"FROM Authorship a",
"JOIN Article r ON a.PMID=r.PMID",
"JOIN JournalIssue i ON i.jiid = r.JournalIssueID",
"JOIN Journal j ON j.jid=i.JournalId;")
dbWriteTable(dw, "AuthorshipDimension", authorshipDimensionDF,
append = TRUE, row.names = FALSE)
doSQL("DROP TABLE IF EXISTS starschema.PublicationDimension;")
doSQL("DROP TABLE IF EXISTS starschema.JournalFact;")
doSQL("CREATE TABLE starschema.JournalFact (",
"jid INTEGER NOT NULL PRIMARY KEY,",
"ISSN TEXT,",
"ISSNType TEXT,",
"Title TEXT,",
"ISOAbbreviation TEXT,",
"numIssues INTEGER,",
"numVolumes INTEGER, ",
"numArticles INTEGER,",
"numAuthors INTEGER",
");")
doSQL("CREATE TABLE starschema.PublicationDimension (",
"jid INTEGER NOT NULL,",
"PMID INTEGER NOT NULL,",
"Language TEXT NOT NULL,",
"ArticleTitle TEXT NOT NULL,",
"aid INTEGER NOT NULL,",
"aLastName TEXT,",
"aForeName TEXT,",
"aaffiliation TEXT,",
"Volume INTEGER,",
"Issue INTEGER,",
"PubYear INTEGER NOT NULL,",
"PubMonth INTEGER NOT NULL,",
"PubDay INTEGER,",
"PubQuarter INTEGER,",
"FOREIGN KEY (jid) REFERENCES JournalFact(jid)",
");")
journalFactDF <-
getQuery("SELECT j.*, d.numIssues, d.numVolumes, d.numArticles, d.numAuthors",
"FROM Journal j",
"INNER JOIN (SELECT ji.JournalID AS jid,",
"COUNT(DISTINCT ji.Issue) AS numIssues,",
"COUNT(DISTINCT ji.Volume) AS numVolumes,",
"COUNT(DISTINCT ar.PMID) AS numArticles,",
"COUNT(DISTINCT au.aid) AS numAuthors",
"FROM Article ar",
"LEFT JOIN Authorship au ON (au.PMID = ar.PMID)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)",
"GROUP BY ji.JournalID) AS d",
"ON (j.jid = d.jid)")
dbWriteTable(dw, "JournalFact", journalFactDF, append = TRUE,
row.names = FALSE)
doSQL("UPDATE JournalFact SET numAuthors = 0 WHERE numAuthors IS NULL")
publicationDimensionDF <-
getQuery("SELECT ji.JournalID AS jid, ar.PMID, ar.Language, ar.ArticleTitle,",
"aus.aid, au.ForeName AS aForeName, au.LastName AS aLastName,",
"au.affiliation AS aaffiliation, ji.Volume, ji.Issue,",
"ji.PubYear, ji.PubMonth, ji.PubDay, CEIL(PubMonth/3.0) AS PubQuarter",
"FROM Article ar",
"LEFT JOIN Authorship aus ON (aus.PMID = ar.PMID)",
"LEFT JOIN Author au ON (aus.aid = au.aid)",
"INNER JOIN JournalIssue ji ON (ji.jiid = ar.JournalIssueID)")
dbWriteTable(dw, "PublicationDimension", publicationDimensionDF,
append = TRUE, row.names = FALSE)
dbDisconnect(dw)
dbDisconnect(db)
source("~/Code/CS 5200/ASSIGNMENTS/CS5200.PracticumII.JohnsonO-LearyB/LoadDataWarehouse.JohnsonO-LearyB.R", echo=TRUE)
dbGetQuery(db, "select * from AuthorFact")
dbGetQuery(dw, "select * from AuthorFact")
dbGetQuery(dw, "select * from AuthorFact") |> head()
dbGetQuery(dw, "select * from AuthorshipDimension") |> head()
dbGetQuery(dw, "select * from JournalFact") |> head()
dbGetQuery(dw, "select * from PublicationDimension") |> head()
dbDisconnect(dw)
dbDisconnect(db)
library(RMySQL)
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
dbGetQuery(dw, "select * from PublicationDimension where PubQuarter = 4")
dbDisconnect(dw)
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
# QUESTION 2.2 - CONNECTING TO MySQL AND SQLite
# ---------------------------------------------
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
res <- dbGetQuery(dw, "SELECT jf.jid AS `Journal ID`,
jf.Title AS `Journal Title`,
pd.PubYear AS `Year`,
SUM(pd.pubQuarter = 1) AS Q1,
SUM(pd.pubQuarter = 2) AS Q2,
SUM(pd.pubQuarter = 3) AS Q3,
SUM(pd.pubQuarter = 4) AS Q4,
COUNT(*) AS `Total Articles`
FROM PublicationDimension pd
INNER JOIN JournalFact jf ON (jf.jid = pd.jid)
GROUP BY jf.jid, pd.PubYear
ORDER BY jf.jid, pd.PubYear")
res
res |> filter(is.na(Q1))
res |> filter(is.na(Q1)) |> select (Q1:Q4)
res |> filter(is.na(Q1)) |> select (Q1:Q4) |> apply(1, function(y) all(is.na(y)))
res |> filter(is.na(Q1)) |> select (Q1:Q4) |> apply(1, function(y) all(is.na(y))) |> all()
dbDisconnect(db)
dbDisconnect(dw)
source("~/Code/CS 5200/ASSIGNMENTS/CS5200.PracticumII.JohnsonO-LearyB/LoadXML2DB.JohnsonO-LearyB.R", echo=TRUE)
source("~/Code/CS 5200/ASSIGNMENTS/CS5200.PracticumII.JohnsonO-LearyB/LoadDataWarehouse.JohnsonO-LearyB.R", echo=TRUE)
library(RSQLite)
library(XML)
library(dplyr)
db <- dbConnect(SQLite(), "pubmedArticleSet.db")
# QUESTION 2.2 - CONNECTING TO MySQL AND SQLite
# ---------------------------------------------
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
library(RMySQL)
# QUESTION 2.2 - CONNECTING TO MySQL AND SQLite
# ---------------------------------------------
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
dbGetQuery(dw, "SELECT * FROM JournalFact")
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
dw <-  dbConnect(MySQL(),
user = 'root',
password = '587DJLOTL4mys',
dbname = 'starschema',
host = 'localhost',
port = 3306)
dbDisconnect(dw)
dbDisconnect(db)
source("~/Code/CS 5200/ASSIGNMENTS/CS5200.PracticumII.JohnsonO-LearyB/LoadXML2DB.JohnsonO-LearyB.R", echo=TRUE)
source("~/Code/CS 5200/ASSIGNMENTS/CS5200.PracticumII.JohnsonO-LearyB/LoadDataWarehouse.JohnsonO-LearyB.R", echo=TRUE)
getwd()
library(XML)
library(dplyr)
xmlPath <- "/Users/omijoh/Downloads/senators_cfm.xml"
xml <- xmlParse(xmlPath, validate = T)
xml <- xmlParse(xmlPath)
xpathSApply(xml, "//member[state='VT']/last_name")
xpathSApply(xml, "//member[state='VT']/last_name & //member[state='MA']/last_name")
xpathSApply(xml, "//member[state='VT']/last_name | //member[state='MA']/last_name")
xpathSApply(xml, "//member[state='VT']/last_name|//member[state='MA']/last_name")
xpathSApply(xml, "//member[state='VT']/last_name|//member[state='MA']/last_name")
library(ggplot2)
