dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
}
createPlaylist(db, "Dog Songs", 16, 1580, 1606, 1610, 2412, 3096, 3369)
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param ... trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, ...) {
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# create new playlist
sql <- "INSERT INTO playlists(Name) VALUES ('?');"
r <- dbSendStatement(dbcon, sql, params = list(playlist_name))
if (dbGetRowsAffected(r) < 1)
txnFailed = TRUE
dbClearResult(r)
name <- dbGetQuery(dbcon,
paste("SELECT PlaylistID
FROM playlists
WHERE Name =", playlist_name))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", name, ",", ..., ")", collapse = ","))
r <- dbSendStatement(dbcon, sql)
if (dbGetRowsAffected(r) < 1)
txnFailed = TRUE
dbClearResult(r)
# commit transaction if no failure, otherwise rollback
dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
}
createPlaylist(db, "Dog Songs", 16, 1580, 1606, 1610, 2412, 3096, 3369)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("mediadb.png")
library(RSQLite)
db <- dbConnect(SQLite(), "MediaDB.db")
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param ... trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, ...) {
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# create new playlist
sql <- "INSERT INTO playlists(Name) VALUES ('?');"
r <- dbSendStatement(dbcon, sql, params = list(playlist_name))
if (dbGetRowsAffected(r) < 1)
txnFailed = TRUE
dbClearResult(r)
name <- dbGetQuery(dbcon,
paste("SELECT PlaylistID
FROM playlists
WHERE Name =", playlist_name))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", name, ",", ..., ")", collapse = ","))
r <- dbSendStatement(dbcon, sql)
if (dbGetRowsAffected(r) < 1)
txnFailed = TRUE
dbClearResult(r)
# commit transaction if no failure, otherwise rollback
dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
}
createPlaylist(db, "Dog Songs", 16, 1580, 1606, 1610, 2412, 3096, 3369)
tracks <- c(16, 1580, 1606, 1610, 2412, 3096, 3369)
name <- "Dog Songs"
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", name, ",", tracks, ")", collapse = ","))
sql
WHERE Name =", playlist_name))[[1, 1]]
WHERE Name =", playlist_name))[[1, 1]]
dbGetQuery(dbcon,
paste("SELECT PlaylistID
FROM playlists
WHERE Name =", playlist_name))
playlist_name
dbGetQuery(dbcon,
paste("SELECT PlaylistID
FROM playlists
WHERE Name LIKE", playlist_name))
?dbGetQuery
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("mediadb.png")
library(RSQLite)
db <- dbConnect(SQLite(), "MediaDB.db")
dbcon <- db
playlist_name
tracks
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# create new playlist
sql <- "INSERT INTO playlists(Name) VALUES ('?');"
r <- dbSendStatement(dbcon, sql, params = list(playlist_name))
txnFailed = TRUE
txnFailed
r <- dbSendStatement(dbcon, sql, params = playlist_name)
?dbSendStatement
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
r <- dbSendStatement(dbcon, sql)
if (dbGetRowsAffected(r) < 1)
txnFailed = TRUE
if (dbGetRowsAffected(r) < 1) {txnFailed = TRUE}
txnFailed
txnFailed = FALSE
if (dbGetRowsAffected(r) < 1) {txnFailed = TRUE}
txnFailed
dbClearResult(r)
pid <- dbGetQuery(dbcon,
paste("SELECT PlaylistID
FROM playlists
WHERE Name LIKE", playlist_name))[[1, 1]]
pid
dbGetQuery(dbcon,
paste("SELECT PlaylistId
FROM playlists
WHERE Name LIKE", playlist_name))
WHERE Name = '", playlist_name, "'"))[[1, 1]]
dbGetQuery(dbcon,
paste("SELECT PlaylistId
FROM playlists
WHERE Name = '", playlist_name, "'"))
dbGetQuery(dbcon,
paste("SELECT PlaylistId
FROM playlists
WHERE Name LIKE '", playlist_name, "'"))
dbGetQuery(dbcon, "SELECT * from playlists")
dbGetQuery(dbcon, "SELECT * from playlists WHERE Name LIKE 'Dog Songs'")
dbGetQuery(dbcon, "SELECT * from playlists WHERE Name = 'Dog Songs'")
"SELECT PlaylistId
FROM playlists
WHERE Name LIKE '", playlist_name, "'"
dbGetQuery(dbcon,
paste0("SELECT PlaylistId
FROM playlists
WHERE Name = '", playlist_name, "'"))
WHERE Name = '", playlist_name, "'"))[[1, 1]]
WHERE Name = '", playlist_name, "'"))[[1, 1]]
pid <-
dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
pid
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
r <- dbSendStatement(dbcon, sql)
if (dbGetRowsAffected(r) < 1)
txnFailed = TRUE
dbGetRowsAffected(r) < 1
txnFailed <- dbGetRowsAffected(r) < 1
txnFailed
dbClearResult(r)
# commit transaction if no failure, otherwise rollback
dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("mediadb.png")
library(RSQLite)
db <- dbConnect(SQLite(), "MediaDB.db")
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
r <- dbSendStatement(dbcon, sql)
txnFailed <- dbGetRowsAffected(r) < 1
dbClearResult(r)
pid <-
dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
r <- dbSendStatement(dbcon, sql)
txnFailed <- dbGetRowsAffected(r) < 1
dbClearResult(r)
# commit transaction if no failure, otherwise rollback
dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
}
createPlaylist(db, "Dog Songs", c(16, 1580, 1606, 1610, 2412, 3096, 3369))
?dbSendStatement
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendStatement(dbcon, sql)
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendStatement(dbcon, sql)
dbExecute("COMMIT TRANSACTION")
txnFailed <- FALSE
}, error = function(e) {
# handling any breaks by rolling back
dbExecute("ROLLBACK TRANSACTION")
txnFailed <- TRUE
})
return !txnFailed
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendStatement(dbcon, sql)
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendStatement(dbcon, sql)
dbExecute("COMMIT TRANSACTION")
return(TRUE)
}, error = function(e) {
# rolling back if anything breaks
dbExecute("ROLLBACK TRANSACTION")
return(FALSE)
})
}
createPlaylist(db, "Dog Songs 2", c(16, 16, 16, 16))
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendStatement(dbcon, sql)
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendStatement(dbcon, sql)
dbExecute(dbcon, "COMMIT TRANSACTION")
return(TRUE)
}, error = function(e) {
# rolling back if anything breaks
dbExecute(dbcon, "ROLLBACK TRANSACTION")
return(FALSE)
})
}
createPlaylist(db, "Dog Songs 2", c(16, 16, 16, 16))
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("mediadb.png")
library(RSQLite)
db <- dbConnect(SQLite(), "MediaDB.db")
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
r <- dbSendStatement(dbcon, sql)
txnFailed <- dbGetRowsAffected(r) < 1
dbClearResult(r)
pid <-
dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
r <- dbSendStatement(dbcon, sql)
txnFailed <- dbGetRowsAffected(r) < 1
dbClearResult(r)
# commit transaction if no failure, otherwise rollback
dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
}
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendStatement(dbcon, sql)
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendStatement(dbcon, sql)
dbExecute(dbcon, "COMMIT TRANSACTION")
return(TRUE)
}, error = function(e) {
# rolling back if anything breaks
dbExecute(dbcon, "ROLLBACK TRANSACTION")
return(FALSE)
})
}
createPlaylist(db, "Dog Songs 2", c(16, 16, 16, 16))
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendQuery(dbcon, sql)
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendQuery(dbcon, sql)
dbExecute(dbcon, "COMMIT TRANSACTION")
return(TRUE)
}, error = function(e) {
# rolling back if anything breaks
dbExecute(dbcon, "ROLLBACK TRANSACTION")
return(FALSE)
})
}
createPlaylist(db, "Dog Songs", c(16, 1580, 1606, 1610, 2412, 3096, 3369))
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendStatement(dbcon, sql) |>
dbClearResult()
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendStatement(dbcon, sql) |>
dbClearResult()
dbExecute(dbcon, "COMMIT TRANSACTION")
return(TRUE)
}, error = function(e) {
# rolling back if anything breaks
dbExecute(dbcon, "ROLLBACK TRANSACTION")
return(FALSE)
})
}
createPlaylist(db, "Dog Songs 2", c(16, 16, 16, 16))
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("mediadb.png")
library(RSQLite)
db <- dbConnect(SQLite(), "MediaDB.db")
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
r <- dbSendStatement(dbcon, sql)
txnFailed <- dbGetRowsAffected(r) < 1
dbClearResult(r)
pid <-
dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
r <- dbSendStatement(dbcon, sql)
txnFailed <- dbGetRowsAffected(r) < 1
dbClearResult(r)
# commit transaction if no failure, otherwise rollback
dbExecute(dbcon, ifelse(txnFailed,
"ROLLBACK TRANSACTION",
"COMMIT TRANSACTION"))
# return TRUE if success, FALSE otherwise
return (!txnFailed)
}
#' Creates a playlist with desired tracks
#' Assumption: The new playlist name is unique.
#'
#' @param dbcon the database
#' @param playlist_name the name of the new playlist
#' @param tracks vector of trackIDs for any tracks to add to the playlist
#' @return status -- TRUE if success, FALSE otherwise
createPlaylist <- function (dbcon, playlist_name, tracks) {
dbExecute(dbcon, "BEGIN TRANSACTION")
tryCatch({
# create new playlist
sql <- paste0("INSERT INTO playlists(Name) VALUES ('",
playlist_name, "');")
dbSendStatement(dbcon, sql) |>
dbClearResult()
# retrieve playlistId for new item
pid <- dbGetQuery(dbcon,
paste0("SELECT PlaylistId FROM playlists ",
"WHERE Name = '", playlist_name, "'"))[[1, 1]]
# insert new rows into playlist_track for any tracks
sql <- paste("INSERT INTO playlist_track(PlaylistID, TrackId) VALUES",
paste("(", pid, ",", tracks, ")", collapse = ","))
dbSendStatement(dbcon, sql) |>
dbClearResult()
dbExecute(dbcon, "COMMIT TRANSACTION")
return(TRUE)
}, error = function(e) {
# rolling back if anything breaks
dbExecute(dbcon, "ROLLBACK TRANSACTION")
return(FALSE)
})
}
createPlaylist(db, "Dog Songs", c(16, 1580, 1606, 1610, 2412, 3096, 3369))
createPlaylist(db, "Dog Songs 2", c(16, 16, 16, 16))
