knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
sqlite_db <- dbConnect(RSQLite(), "sakila.db")
library(RSQLite)
sqlite_db <- dbConnect(SQLite(), "sakila.db")
# MySQL connection
library(RMySQL)
db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'sakila'
db_host <- 'localhost' # AWS Host
db_port <- 3306
mysql_db <-  dbConnect(MySQL(),
user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
query <- "EXPLAIN QUERY PLAN
SELECT film_id, title
FROM film
WHERE rating = 'PG'"
dbGetQuery(sqlite_db, query)
query <- "EXPLAIN QUERY PLAN
SELECT film_id, title
FROM film
WHERE rating = 'PG'"
system.time(dbGetQuery(sqlite_db, query))
query <- "EXPLAIN QUERY PLAN
SELECT film_id, title
FROM film
WHERE rating = 'PG'"
dbGetQuery(sqlite_db, query)
system.time(dbGetQuery(sqlite_db, query))
index_statement <- "CREATE INDEX rating_index ON film(rating)"
dbExecute(sqlite_db, index_statement)
dbGetQuery(sqlite_db, query)
system.time(dbGetQuery(sqlite_db, query))
index_drop_statement <- "DROP INDEX rating_index"
dbExecute(sqlite_db, index_statement)
dbExecute(sqlite_db, index_drop_statement)
# Evaluating without index
dbGetQuery(sqlite_db, query)
rbenchmark(dbGetQuery(sqlite_db, query), times = 10)
library(rbenchmark)
install.packages(rbenchmark)
install.packages("rbenchmark")
library(rbenchmark)
rbenchmark(dbGetQuery(sqlite_db, query), times = 10)
benchmark(dbGetQuery(sqlite_db, query), times = 10)
benchmark(dbGetQuery(sqlite_db, query), replications = 10)
benchmark(dbGetQuery(sqlite_db, query), replications = 10,
columns = c("test", "elapsed", "user.self", "sys.self"))
# Evaluating without index
dbGetQuery(sqlite_db, query)
benchmark(dbGetQuery(sqlite_db, query), replications = 10,
columns = c("test", "elapsed", "user.self", "sys.self"))
# creating an index
dbExecute(sqlite_db, index_statement)
# evaluating with index
dbGetQuery(sqlite_db, query)
benchmark(dbGetQuery(sqlite_db, query), replications = 10,
columns = c("test", "elapsed", "user.self", "sys.self"))
# remove the index
dbExecute(sqlite_db, index_drop_statement)
# Evaluating without index
dbGetQuery(mysql_db, query)
WHERE rating = 'PG'"
WHERE rating = 'PG'"
query <- "EXPLAIN
SELECT film_id, title
FROM film
WHERE rating = 'PG'"
# Evaluating without index
dbGetQuery(mysql_db, query)
benchmark(dbGetQuery(mysql_db, query), replications = 10,
columns = c("test", "elapsed", "user.self", "sys.self"))
# creating an index
dbExecute(mysql_db, index_statement)
# evaluating with index
dbGetQuery(mysql_db, query)
benchmark(dbGetQuery(mysql_db, query), replications = 10,
columns = c("test", "elapsed", "user.self", "sys.self"))
# remove the index
dbExecute(mysql_db, index_drop_statement)
# Evaluating without index
dbGetQuery(mysql_db, query)
# remove the index
dbExecute(mysql_db, index_drop_statement)
library(rbenchmark)
index_statement <- "CREATE INDEX rating_index ON film(rating);"
index_drop_statement <- "DROP INDEX rating_index;"
# remove the index
dbExecute(sqlite_db, index_drop_statement)
# remove the index
dbExecute(mysql_db, index_drop_statement)
index_drop_statement <- "DROP INDEX rating_index ON film;"
# creating an index
dbExecute(sqlite_db, index_statement)
# remove the index
dbExecute(sqlite_db, index_drop_statement)
SuppressPackageStartupMessage(
library(rbenchmark),
library(RSQLite),
library(RMySQL)
)
suppressPackageStartupMessage(
library(rbenchmark),
library(RSQLite),
library(RMySQL)
)
suppressPackageStartupMessages(
library(rbenchmark),
library(RSQLite),
library(RMySQL)
)
suppressPackageStartupMessages({
library(rbenchmark),
suppressPackageStartupMessages({
library(rbenchmark)
library(RSQLite)
library(RMySQL)
})
rmarkdown::render()
rmarkdown::render("explore_query_planning.Rmd")
benchmark_query <- function(dbcon, query) {
benchmark(dbGetQuery(dbcon, query), replications = 10,
columns = c("test", "elapsed", "user.self", "sys.self"))
}
join_query <-
"SELECT address, city, country
FROM (address a INNER JOIN city ci ON (a.city_id = ci.city_id))
INNER JOIN country co ON (ci.country_id = co.country_id)"
# Evaluating
dbGetQuery(sqlite_db, query)
# benchmarking
benchmark_query(sqlite_db, join_query)
# Evaluating
dbGetQuery(sqlite_db, query)
# Evaluating
dbGetQuery(sqlite_db, join_query)
join_query <-
"EXPLAIN QUERY PLAN
SELECT address, city, country
FROM (address a INNER JOIN city ci ON (a.city_id = ci.city_id))
INNER JOIN country co ON (ci.country_id = co.country_id)"
# Evaluating
dbGetQuery(sqlite_db, join_query)
# benchmarking
benchmark_query(sqlite_db, join_query)
join_query <-
"EXPLAIN
SELECT address, city, country
FROM (address a INNER JOIN city ci ON (a.city_id = ci.city_id))
INNER JOIN country co ON (ci.country_id = co.country_id)"
# Evaluating
dbGetQuery(mysql_db, join_query)
# benchmarking
benchmark_query(mysql_db, join_query)
INNER JOIN country co ON (ci.country_id = co.country_id)"
join_query <-
"SELECT address, city, country
FROM (address a INNER JOIN city ci ON (a.city_id = ci.city_id))
INNER JOIN country co ON (ci.country_id = co.country_id)"
# Evaluating
dbGetQuery(mysql_db, join_query)
# benchmarking
benchmark_query(mysql_db, join_query)
# Evaluating with index
dbGetQuery(mysql_db, paste("EXPLAIN", query))
