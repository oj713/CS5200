---
title: "Explore Query Planning and Indexing"
author: "Omi Johnson"
output: 
  html_document:
    toc: TRUE
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Establishing Connections

```{r}
suppressPackageStartupMessages({
  library(rbenchmark)
  library(RSQLite)
  library(RMySQL)
})

benchmark_query <- function(dbcon, query) {
  benchmark(dbGetQuery(dbcon, query), replications = 10,
          columns = c("test", "elapsed", "user.self", "sys.self")) |>
    suppressWarnings()
}
```

```{r}
#SQLite connection
sqlite_db <- dbConnect(SQLite(), "sakila.db")
```

I am assuming that there is a MySQL database already configured to have the Sakila data, which was confirmed to be acceptable on Teams.

```{r}
# MySQL connection

db_user <- 'root'
db_password <- '587DJLOTL4mys'
db_name <- 'sakila'
db_host <- 'localhost' # AWS Host
db_port <- 3306

mysql_db <-  dbConnect(MySQL(), 
                       user = db_user, password = db_password,
                       dbname = db_name, host = db_host, port = db_port)
```

## Experiment 1

**Query on a single table with a WHERE clause that is not the primary key but has an index; same query but no index on that column**

### SQLite

```{r}
query <- "SELECT film_id, title
            FROM film
           WHERE rating = 'PG'"
```

```{r}
# Evaluating without index
dbGetQuery(sqlite_db, paste("EXPLAIN QUERY PLAN", query))
# benchmarking
benchmark_query(sqlite_db, query)
```
```{sql connection = sqlite_db}
CREATE INDEX rating_index ON film(rating)
```
```{r}
# evaluating with index
dbGetQuery(sqlite_db, paste("EXPLAIN QUERY PLAN", query))
# benchmarking
benchmark_query(sqlite_db, query)
```
```{sql connection = sqlite_db}
DROP INDEX rating_index
```

**Results and Observations**:

* Both versions of the query took approximately the same time, although the non-index approach elapsed for .001 seconds longer. 
* The plan without the index did a simple linear search, while the version with an index used the index.

### MySQL

```{r}
# Evaluating without index
dbGetQuery(mysql_db, paste("EXPLAIN", query))
# benchmarking
benchmark_query(mysql_db, query)
```
```{sql connection = mysql_db}
CREATE INDEX rating_index ON film(rating)
```
```{r}
# Evaluating with index
dbGetQuery(mysql_db, paste("EXPLAIN", query))
# benchmarking
benchmark_query(mysql_db, query) 
```
```{sql connection = mysql_db}
DROP INDEX rating_index ON film
```

**Results and Observations**:

* The index version of the query took about half the elapsed time as the non-indexed version; the user and system times were the same. 
* The indexed version of the query recognized and used rating_index as a key; the non-indexed version found no applicable keys. 
* The estimate of examined rows is 5x less for the indexed table. Consequently, every examined row was filtered and the filtration percent was 5x higher for the indexed table. 

### Comparison

* The elapsed time was approximately identical across all 4 trials, although MySQL took about .001 seconds more elapsed time. 

## Experiment 2

**query with a join on at least three tables (no secondary indexes; no where clause other than join clause)**

### SQLite

```{r}
join_query <- 
 "SELECT address, city, country
  FROM (address a INNER JOIN city ci ON (a.city_id = ci.city_id))
       INNER JOIN country co ON (ci.country_id = co.country_id)"
```

```{r}
# Evaluating
dbGetQuery(sqlite_db, paste("EXPLAIN QUERY PLAN", join_query))
# benchmarking
benchmark_query(sqlite_db, join_query)
```

### MySQL
```{r}
# Evaluating
dbGetQuery(mysql_db, paste("EXPLAIN", join_query))
# benchmarking
benchmark_query(mysql_db, join_query)
```

### Commentary

* Three rows were returned for explanations -- one for each part of the three-way join operation
* MySQL had indices created for the primary and foreign keys on each table, while SQLite relied on the `SEARCH` operation.
* The indexed MySQL had an elapsed time that was 4 times faster than the SQLite approach. 

## Experiment 3

**query on a single table with group by having a where clause that involves only the primary key column**

### SQLite

```{r}
group_by_query <- 
 "SELECT COUNT(*)
    FROM address
   WHERE address_id > 10 AND address_id < 50
   GROUP BY city_id"
```

```{r}
# Evaluating
dbGetQuery(sqlite_db, paste("EXPLAIN QUERY PLAN", group_by_query))
# benchmarking
benchmark_query(sqlite_db, group_by_query)
```

### MySQL
```{r}
# Evaluating
dbGetQuery(mysql_db, paste("EXPLAIN", group_by_query))
# benchmarking
benchmark_query(mysql_db, group_by_query)
```

### Commentary

* Two rows were returned for both explanations; one for sorting the primary key and one for grouping via city_id
* both queries used a temporary b-tree for group-by. This is interesting because MySQL had a key for city_id already.
* The MySQL version took twice as long as the SQLite version. 

## Experiment 4

**one additional experiment of your choice: any query, any index use -- be creative and investigate**

How does using a compound query compare to using a focused query (when searching through only one attribute, which isn't the primary part of the key)?

### SQLite
```{r}
query4 <- "SELECT film_id, title
             FROM film
            WHERE title = 'Ace Goldfinger'"
```

Compound Index

```{sql connection = sqlite_db}
CREATE INDEX title_len ON film(length, title)
```
```{r}
# Evaluating without index
dbGetQuery(sqlite_db, paste("EXPLAIN QUERY PLAN", query4))
# benchmarking
benchmark_query(sqlite_db, query4)
```
```{sql connection = sqlite_db}
DROP INDEX title_len
```

Normal Index

```{sql connection = sqlite_db}
CREATE INDEX title_idx ON film(title)
```
```{r}
# evaluating with index
dbGetQuery(sqlite_db, paste("EXPLAIN QUERY PLAN", query4))
# benchmarking
benchmark_query(sqlite_db, query4)
```
```{sql connection = sqlite_db}
DROP INDEX title_idx
```

**Results and Conclusions**

* The version with a compound index performed a SCAN, while the version with a single index performed a SEARCH.
* The time for both searches was exactly the same. 
* This result is interesting because I had assumed from the lectures that compound indexes weren't useful for searching if the attribute in question wasn't the primary attribute; however, the compound index was still used in the search and matched the time of a singular index. Perhaps because title is unique?

### MySQL

Compound Index

```{sql connection = mysql_db}
CREATE INDEX title_len ON film(length, title)
```
```{r}
# Evaluating without index
dbGetQuery(mysql_db, paste("EXPLAIN", query4))
# benchmarking
benchmark_query(mysql_db, query4)
```
```{sql connection = mysql_db}
DROP INDEX title_len ON film
```

Normal Index

```{sql connection = mysql_db}
CREATE INDEX title_idx ON film(title)
```
```{r}
# evaluating with index
dbGetQuery(mysql_db, paste("EXPLAIN", query4))
# benchmarking
benchmark_query(mysql_db, query4)
```
```{sql connection = mysql_db}
DROP INDEX title_idx ON film
```

**Results and Conclusions**

* Similar to SQLite, the speed between compound and singular was approximately the same, although singular was slightly faster. 
* MySQL pre-generated an index for title and used that to speed up the search. 

### Comparison

* SQLite was about twice as fast as MySQL
* In both cases, the performance was about the same between non-compound and compound keys

## Disconnecting

```{r}
dbDisconnect(mysql_db)
dbDisconnect(sqlite_db)
```

