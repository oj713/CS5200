# retrieving list of all genres
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
get_genre <- function(genre) {
# retrieving number of books
numBooks <- xpath_help("count(//book[genre = '", genre, "'])")
# retrieving average price
avgPrice <- xpath_help("//book[genre = '", genre, "']/price/text()") |>
sapply(function(p) as(p, "numeric")) |>
mean()
c(genre, numBooks, avgPrice)
}
lapply(genres, get_genre) |>
bind_rows() |>
setNames(c("Genre", "Number of Books", "Average Price"))
# retrieving list of all genres
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
get_genre <- function(genre) {
# retrieving number of books
numBooks <- xpath_help("count(//book[genre = '", genre, "'])")
# retrieving average price
avgPrice <- xpath_help("//book[genre = '", genre, "']/price/text()") |>
sapply(function(p) as(p, "numeric")) |>
mean()
c(genre, numBooks, avgPrice)
}
lapply(genres, get_genre) |>
rbind() |>
setNames(c("Genre", "Number of Books", "Average Price"))
# retrieving list of all genres
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
get_genre <- function(genre) {
# retrieving number of books
numBooks <- xpath_help("count(//book[genre = '", genre, "'])")
# retrieving average price
avgPrice <- xpath_help("//book[genre = '", genre, "']/price/text()") |>
sapply(function(p) as(p, "numeric")) |>
mean()
c(genre, numBooks, avgPrice)
}
lapply(genres, get_genre)
lapply(genres, get_genre) |> rbind()
lapply(genres, get_genre) |> do.call(rbind())
do.call(rbind, lapply(genres, get_genre))
do.call(rbind, lapply(genres, get_genre)) |>
as.data.frame()
do.call(rbind, lapply(genres, get_genre)) |>
as.data.frame() |>
setNames("Genre", "Number of Books", "Average Price")
do.call(rbind, lapply(genres, get_genre)) |>
as.data.frame() |>
setNames(c("Genre", "Number of Books", "Average Price"))
# retrieving list of all genres
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
get_genre <- function(genre) {
# retrieving number of books
numBooks <- xpath_help("count(//book[genre = '", genre, "'])")
# retrieving average price
avgPrice <- xpath_help("//book[genre = '", genre, "']/price/text()") |>
sapply(function(p) as(p, "numeric")) |>
mean()
list(genre, numBooks, avgPrice)
}
do.call(rbind, lapply(genres, get_genre)) |>
as.data.frame() |>
setNames(c("Genre", "Number of Books", "Average Price"))
do.call(rbind, sapply(genres, get_genre)) |>
as.data.frame() |>
setNames(c("Genre", "Number of Books", "Average Price"))
data.frame(lapply(genres, get_genre))
do.call(rbind.data.frame, lapply(genres, get_genre)) |>
setNames(c("Genre", "Number of Books", "Average Price"))
# retrieving list of all genres
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
get_genre <- function(genre) {
# retrieving number of books
numBooks <- xpath_help("count(//book[genre = '", genre, "'])")
# retrieving average price
avgPrice <- xpath_help("//book[genre = '", genre, "']/price/text()") |>
sapply(function(p) as(p, "numeric")) |>
mean()
list(genre, numBooks, avgPrice)
}
do.call(rbind.data.frame, lapply(genres, get_genre)) |>
setNames(c("Genre", "Number of Books", "Average Price"))
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('https://imgur.com/a/WAcxWdK')
knitr::include_graphics(https://imgur.com/a/WAcxWdK)
knitr::include_graphics('https://imgur.com/a/WAcxWdK')
knitr::include_graphics('https://imgur.com/a/WAcxWdK')
knitr::include_graphics('imgur.com/a/WAcxWdK')
knitr::include_graphics('https://i.imgur.com/7rkzUSK.png')
knitr::include_graphics(https://i.imgur.com/nQztzQz.png)
knitr::include_graphics('https://i.imgur.com/nQztzQz.png')
knitr::include_graphics('https://i.imgur.com/nQztzQz.png')
library(XML)
library(stringr)
xml <- xmlParse("Books-v3.xml")
xpath_help("//catalog")
catalogs <- xpath_help("//catalog")
for (catalog in catalogs) {
xpath_help("//book")
}
for (catalog in catalogs) {
xpath_help("//book") |> print()
}
length(catalogs)
catalogs_df <- data.frame(cid = 1:length(catalogs))
catalogs_df
cid = 1
catalog <- catalogs[cid]
catalog
# create genre table
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
genres_df <- data.frame(gid = 1:length(genres),
gname = genres)
genres_df
# create author table
authors <- xpath_help("//book/author/text()") |>
sapply(function(a) as(a, "character")) |>
unique()
authors_df <- data.frame(aid = 1:length(authors),
aname = authors)
authors
catalog
books <- xpathSApply(catalog, "/book")
catalog <- catalogs[cid]
books <- xpathSApply(catalog, "/book")
catalog <- catalogs[[cid]]
books <- xpathSApply(catalog, "/book")
books
xpathSApply(catalog, "/book")
xpathSApply(catalog, "//book")
book <- books[[1]]
book <- catalog[[1]]
book
xpathSApply(book, "/@id")
xpathSApply(book, "//@id")
book
xpathSApply(book, "/@id")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('https://i.imgur.com/nQztzQz.png')
library(RSQLite)
db <- dbConnect(SQLite(), "booksDB.db")
library(XML)
library(stringr)
xml <- xmlParse("Books-v3.xml")
xpath_help <- function(...) {
xpathSApply(xml, paste0(...))
}
# create genre table
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
genres_df <- data.frame(gid = 1:length(genres),
gname = genres)
# create author table
authors <- xpath_help("//book/author/text()") |>
sapply(function(a) as(a, "character")) |>
unique()
authors_df <- data.frame(aid = 1:length(authors),
aname = authors)
# function that creates a list for a book entry
processBook <- function(book, cid) {
id <- xpathSApply(book, "/@id")
}
# create catalog and books tables
catalogs <- xpath_help("//catalog")
catalogs_df <- data.frame(cid = 1:length(catalogs))
for (cid in catalogs_df$cid) {
catalog <- catalogs[[cid]]
books <- xpathSApply(catalog, "/book")
}
# create catalog and books tables
catalogs <- xpath_help("//catalog")
catalogs_df <- data.frame(cid = 1:length(catalogs))
cid = 1
catalog <- catalogs[[cid]]
catalog
catalog[[1]]
book <- catalog[[1]]
xpathSApply(book, "//@id")
id <- xpathSApply(book, "book/@id")
xpathSApply(book, "book/@id")
xpathSApply(book, "@id")
id <- xpathSApply(book, "@id")
which(authors, "Ralls, Kim")
which(authors == "Ralls, Kim")
author <- which(authors == xpathSApply("author"))
author <- which(authors == xpathSApply("author")[[1]])
xpathSApply("author")
which(authors == xpathSApply(book, "author"))
xpathSApply(book, "author")
xpathSApply(book, "author/text()")
which(authors == xpathSApply(book, "author/text()"))
which(authors ==
as(xpathSApply(book, "author/text()"), "character"))
as(xpathSApply(book, "author/text()"), "character")
xpathSApply(book, "author/text()")[[1]]
xpathSApply(book, "author/text()")[[1]] |> print()
xpathSApply(book, "author/text()")[[1]] |> as("character")
author <- which(authors == xpathSApply(book, "author/text()")[[1]] |>
as("character"))
author
which(genres == xpathSApply(book, "genre/text()")[[1]] |>
as("character"))
genre <- which(genres == xpathSApply(book, "genre/text()")[[1]] |>
as("character"))
xpathSApply(book, "author/text()")[[1]]
xpathSApply(book, "author/text()")[[1]] == "Gambardella, Matthew"
xpathSApply(book, "author/text()")[[1]] |> as.character()
xpathSApply(book, "author/text()")[[1]] |> as("character")
id == "bk101"
# helper method
book_elem <- function(xpath, type = "character") {
xpathSApply(book, xpath)[[1]] |> as(type)
}
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()")[[1]] |> as(type)
}
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
price <- book_elem("price", type = "numeric")
price
publish_date <- book_elem("publish_date", type = "date")
publish_date <- book_elem("publish_date")
publish_date <- book_elem("publish_date", type = "Date")
publish_date
book_elem("edition")
book_elem("edition", type = "numeric")
book_elem("edition", type = "numeric") |> is.null()
book_elem("edition", type = "numeric") |> length()
0 |> length()
# function that creates a list for a book entry
processBook <- function(book, cid) {
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
# mandatory elements
id <- xpathSApply(book, "@id")
title <- book_elem("title/text()")
price <- book_elem("price", type = "numeric")
publish_date <- book_elem("publish_date", type = "Date")
description <- book_elem("description")
# optional elements
edition <- book_elem("edition", type = "numeric")
if (length(edition) == 0) {edition <- NULL}
# references
genre <- which(genres == book_elem("genre"))
author <- which(authors == book_elem("author"))
catalog <- cid
list(id, title, edition, price, publish_date, description, genre, author,
catalog)
}
books |>
lapply(processBook, cid)
books <- xpathSApply(catalog, "book")
books |>
lapply(processBook, cid)
books |>
lapply(print)
xpathSApply(catalog, "book")
length(books)
books[[2]]
books[[16]]
books |>
lapply(function(b) xpathSApply(b, "title"))
books |>
lapply(function(b) xpathSApply(b, "edition"))
books |>
lapply(processBook, cid)
books |>
lapply(function(b) xpathSApply(b, "price"))
which(c(1, 2, 3, 4) == 5)
book
processBook(book)
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
# mandatory elements
id <- xpathSApply(book, "@id")
title <- book_elem("title/text()")
# function that creates a list for a book entry
processBook <- function(book, cid) {
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
# mandatory elements
id <- xpathSApply(book, "@id")
title <- book_elem("title")
price <- book_elem("price", type = "numeric")
publish_date <- book_elem("publish_date", type = "Date")
description <- book_elem("description")
# optional elements
edition <- book_elem("edition", type = "numeric")
if (length(edition) == 0) {edition <- NULL}
# references
genre <- which(genres == book_elem("genre"))
author <- which(authors == book_elem("author"))
catalog <- cid
list(id, title, edition, price, publish_date, description, genre, author,
catalog)
}
books |>
lapply(processBook, cid)
do.call(rbind.data.frame, lapply(books, processBook, cid))
c(2, 3, NULL, 4)
# function that creates a list for a book entry
processBook <- function(book, cid) {
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
# mandatory elements
id <- xpathSApply(book, "@id")
title <- book_elem("title")
price <- book_elem("price", type = "numeric")
publish_date <- book_elem("publish_date", type = "Date")
description <- book_elem("description")
# optional elements
edition <- book_elem("edition", type = "numeric")
if (length(edition) == 0) {edition <- NA}
# references
genre <- which(genres == book_elem("genre"))
author <- which(authors == book_elem("author"))
catalog <- cid
list(id, title, edition, price, publish_date, description, genre, author,
catalog)
}
do.call(rbind.data.frame, lapply(books, processBook, cid))
# function that creates a list for a book entry
processBook <- function(book, cid) {
# helper method
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
# mandatory elements
id <- xpathSApply(book, "@id")
title <- book_elem("title")
price <- book_elem("price", type = "numeric")
publish_date <- book_elem("publish_date", type = "Date")
description <- book_elem("description")
# optional elements
edition <- book_elem("edition", type = "numeric")
if (length(edition) == 0) {edition <- NA}
# references
genre <- which(genres == book_elem("genre"))
author <- which(authors == book_elem("author"))
catalog <- cid
list("id" = id, 'title' = title, 'edition' = edition, 'price' = price,
'publish_date' = publish_date, 'description' = description,
'genre' = genre, 'author' = author, 'catalog' = catalog)
}
do.call(rbind.data.frame, lapply(books, processBook, cid))
# iterating through catalogs and therefore books
books_df <- data.frame (id = character(),
title = character(),
edition = numeric(),
price = numeric(),
publish_date = date(),
description = character(),
genre = numeric(),
author = numeric(),
catalog = numeric(),
stringsAsFactors = F)
# iterating through catalogs and therefore books
books_df <- data.frame (id = character(0),
title = character(0),
edition = numeric(0),
price = numeric(0),
publish_date = date(0),
description = character(0),
genre = numeric(0),
author = numeric(0),
catalog = numeric(0),
stringsAsFactors = F)
# iterating through catalogs and therefore books
books_df <- data.frame (id = character(0),
title = character(0),
edition = numeric(0),
price = numeric(0),
publish_date = Date(0),
description = character(0),
genre = numeric(0),
author = numeric(0),
catalog = numeric(0),
stringsAsFactors = F)
# iterating through catalogs and therefore books
books_df <- data.frame (id = character(0),
title = character(0),
edition = numeric(0),
price = numeric(0),
publish_date = character(0),
description = character(0),
genre = numeric(0),
author = numeric(0),
catalog = numeric(0),
stringsAsFactors = F)
for (cid in catalogs_df$cid) {
catalog <- catalogs[[cid]]
books <- xpathSApply(catalog, "book")
do.call(rbind.data.frame, lapply(books, processBook, cid)) |>
rbind(books_df)
}
books_df
for (cid in catalogs_df$cid) {
catalog <- catalogs[[cid]]
books <- xpathSApply(catalog, "book")
books_df <- do.call(rbind.data.frame,
lapply(books, processBook, cid)) |>
rbind(books_df)
}
books_df
?dbWriteTable
dbWriteTable(db, "Author", authors_df)
dbWriteTable(db, "Author", authors_df, overwrite = TRUE)
dbWriteTable(db, "Author", authors_df, overwrite = TRUE)
dbWriteTable(db, "Genre", genres_df, overwrite = TRUE)
dbWriteTable(db, "Catalog", catalogs_df, overwrite = TRUE)
dbWriteTable(db, "Books", books_df, overwrite = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('https://i.imgur.com/nQztzQz.png')
library(RSQLite)
db <- dbConnect(SQLite(), "booksDB.db")
library(XML)
library(stringr)
xml <- xmlParse("Books-v3.xml")
xpath_help <- function(...) {
xpathSApply(xml, paste0(...))
}
# create genre table
genres <- xpath_help("//book/genre/text()") |>
sapply(function(g) as(g, "character")) |>
unique()
genres_df <- data.frame(gid = 1:length(genres),
gname = genres)
head(genres_df)
# create author table
authors <- xpath_help("//book/author/text()") |>
sapply(function(a) as(a, "character")) |>
unique()
authors_df <- data.frame(aid = 1:length(authors),
aname = authors)
head(authors_df)
# create catalog tables
catalogs <- xpath_help("//catalog")
catalogs_df <- data.frame(cid = 1:length(catalogs))
head(catalogs_df)
# helper function that creates a list for a book entry
processBook <- function(book, cid) {
# helper method to extract text for an element
book_elem <- function(elem, type = "character") {
xpathSApply(book, paste0(elem, "/text()"))[[1]] |> as(type)
}
# mandatory elements
id <- xpathSApply(book, "@id")
title <- book_elem("title")
price <- book_elem("price", type = "numeric")
publish_date <- book_elem("publish_date")
description <- book_elem("description")
# optional elements
edition <- book_elem("edition", type = "numeric")
if (length(edition) == 0) {edition <- NA}
# references
genre <- which(genres == book_elem("genre"))
author <- which(authors == book_elem("author"))
catalog <- cid
list("id" = id, 'title' = title, 'edition' = edition, 'price' = price,
'publish_date' = publish_date, 'description' = description,
'genre' = genre, 'author' = author, 'catalog' = catalog)
}
# defining books base
books_df <- data.frame (id = character(0),
title = character(0),
edition = numeric(0),
price = numeric(0),
publish_date = character(0),
description = character(0),
genre = numeric(0),
author = numeric(0),
catalog = numeric(0),
stringsAsFactors = F)
# iterating through catalogs and by extension, books to create table
for (cid in catalogs_df$cid) {
catalog <- catalogs[[cid]]
books <- xpathSApply(catalog, "book")
books_df <- do.call(rbind.data.frame,
lapply(books, processBook, cid)) |>
rbind(books_df)
}
head(books_df)
dbWriteTable(db, "Author", authors_df, overwrite = TRUE)
dbWriteTable(db, "Genre", genres_df, overwrite = TRUE)
dbWriteTable(db, "Catalog", catalogs_df, overwrite = TRUE)
dbWriteTable(db, "Book", books_df, overwrite = TRUE)
